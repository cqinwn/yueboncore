namespace {ApiControllerNamespace}.Areas.{BaseNameSpaceEx}.Controllers
{
    /// <summary>
    /// {TableNameDesc}接口
    /// </summary>
    [ApiController]
    [Route("api/{BaseNameSpaceEx}/[controller]")]
    public partial class {ModelTypeName}Controller : AreaApiController<{ModelTypeName}, {ModelTypeName}OutputDto,{ModelTypeName}InputDto,I{ModelTypeName}Service>
    {
        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="_iService"></param>
        public {ModelTypeName}Controller(I{ModelTypeName}Service _iService) : base(_iService)
        {
            iService = _iService;
        }
        /// <summary>
        /// 新增前处理数据
        /// </summary>
        /// <param name="info"></param>
        protected override void OnBeforeInsert({ModelTypeName} info)
        {
            info.Id = IdGeneratorHelper.IdSnowflake();
            info.CreatorTime = DateTime.Now;
            info.CreatorUserId = CurrentUser.UserId;
            info.DeleteMark = false;
            if (info.SortCode == null)
            {
                info.SortCode = 99;
            }
        }
        
        /// <summary>
        /// 在更新数据前对数据的修改操作
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        protected override void OnBeforeUpdate({ModelTypeName} info)
        {
            info.LastModifyUserId = CurrentUser.UserId;
            info.LastModifyTime = DateTime.Now;
        }

        /// <summary>
        /// 在软删除数据前对数据的修改操作
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        protected override void OnBeforeSoftDelete({ModelTypeName} info)
        {
            info.DeleteMark = true;
            info.DeleteTime = DateTime.Now;
            info.DeleteUserId = CurrentUser.UserId;
        }
    }
}