<template>
  <div class="app-container">
    <div class="filter-container">
      <el-card>
        <el-form
          ref="searchformRef" v-show="showSearch"
          :inline="true"
          :model="queryParams"
          class="demo-form-inline"
        >
          <el-form-item label="名称：" prop="Keywords">
            <el-input v-model="queryParams.Keywords" clearable placeholder="名称" />
          </el-form-item>
          <el-form-item>
            <el-button type="primary" @click="handleSearch()">查询</el-button>
            <el-button icon="Refresh" @click="resetQuery">重置</el-button>
          </el-form-item>
        </el-form>
      </el-card>
    </div>
    <el-card>
      <div class="list-btn-container"> 
        <el-button-group>
          <el-button v-hasPermi="['{ModelTypeName}/Add']" type="primary" icon="el-icon-plus" @click="ShowEditOrViewDialog()">新增</el-button>
          <el-button v-hasPermi="['{ModelTypeName}/Edit']" type="primary" icon="el-icon-edit" class="el-button-modify" @click="ShowEditOrViewDialog('edit')">修改</el-button>
          <el-button v-hasPermi="['{ModelTypeName}/Enable']" type="info" icon="el-icon-video-pause" @click="setEnable('0')">禁用</el-button>
          <el-button v-hasPermi="['{ModelTypeName}/Enable']" type="success" icon="el-icon-video-play" @click="setEnable('1')">启用</el-button>
          <el-button v-hasPermi="['{ModelTypeName}/DeleteSoft']" type="warning" icon="el-icon-delete" @click="deleteSoft('0')">软删除</el-button>
          <el-button v-hasPermi="['{ModelTypeName}/Delete']" type="danger" icon="el-icon-delete" @click="deletePhysics()">删除</el-button>
          <el-button type="default" icon="el-icon-refresh" @click="loadTableData()">刷新</el-button>
        </el-button-group>
        <right-toolbar v-model:showSearch="showSearch" @queryTable="loadTableData"></right-toolbar>
      </div>
      <el-table
        ref="gridtable"
        v-loading="tableloading"
        :data="tableData"
        stripe
        highlight-current-row
        style="width: 100%"
        :default-sort="{prop: 'SortCode', order: 'ascending'}"
        @selection-change="handleSelectChange"
        @sort-change="handleSortChange"
      >
        <el-table-column type="selection" width="50" />
        {VueViewListContent}
      </el-table>
      <Pagination
        v-show="queryParams.pageTotal>0"
        :total="queryParams.pageTotal"
        v-model:page="queryParams.CurrenetPageIndex"
        v-model:limit="queryParams.PageSize"
        @pagination="loadTableData"
    />
    </el-card>
    <el-dialog ref="dialogEditForm" draggable :title="editFormTitle+'{ModelTypeDesc}'" v-model="dialogEditFormVisible"  width="660px" append-to-body>
      <el-form ref="editFromRef" :model="editFrom" :rules="rules">
        {VueViewFromContent}
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="dialogEditFormVisible = false">取 消</el-button>
          <el-button type="primary" @click="saveEditForm()">确 定</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script setup name="{ModelTypeName}">

import { get{ModelTypeName}ListWithPager, get{ModelTypeName}Detail,
  save{ModelTypeName}, set{ModelTypeName}Enable, deleteSoft{ModelTypeName},
  delete{ModelTypeName} } from '@/api/{fileClassName}/{ModelTypeNameToLower}'

const { proxy } = getCurrentInstance()
const tableData=ref([])
const tableloading=ref(true)
const dialogEditFormVisible=ref(false)
const editFormTitle=ref("")
const showSearch = ref(true);
const single = ref(true);
const multiple = ref(true);

const formLabelWidth=ref("100px")
const currentId=ref("")// 当前操作对象的ID值，主要用于修改
const ids=ref([])

const data = reactive({
    queryParams:{
        CurrenetPageIndex: 1,
        PageSize: 20,
        pageTotal: 0,
        Order: 'desc',
        Sort: 'CreatorTime',
        Keywords: ''
    },
    editFrom: {},
    rules: {
        {VueViewEditFromRuleContent}
    },
})
    
const { queryParams, editFrom, rules} = toRefs(data);
/**
    * 初始化数据
    */
function InitDictItem() {
}
    
// 取消按钮
function cancel () {
    dialogEditFormVisible.value = false
    reset()
}
// 表单重置
function reset () {
    editFrom.value = {
    {VueViewEditFromContent}        
    //需个性化处理内容
    }
    proxy.resetForm('editFromRef')
}
/**
    * 加载页面table数据
    */
function loadTableData() {
    tableloading.value = true
    get{ModelTypeName}ListWithPager(queryParams.value).then(res => {
        tableData.value = res.ResData.Items
        queryParams.value.pageTotal = res.ResData.TotalItems
        tableloading.value = false
    })
}
/**
    * 点击查询
    */
function handleSearch() {
    queryParams.value.CurrenetPageIndex = 1
    loadTableData()
}

/** 重置查询操作 */
function resetQuery() {
  proxy.resetForm("searchformRef");
  handleSearch();
}

/**
    * 新增、修改或查看明细信息（绑定显示数据）     *
    */
function ShowEditOrViewDialog(view) {
    reset()
    if (view !== undefined) {
    if (ids.value.length > 1 || ids.value.length === 0) {
        proxy.$modal.alert('请选择一条数据进行编辑/修改', '提示')
    } else {
        currentId.value = ids.value[0]
        editFormTitle.value = '编辑'
        dialogEditFormVisible.value = true
        bindEditInfo()
    }
    } else {
    editFormTitle.value = '新增'
    currentId.value = ''
    dialogEditFormVisible.value = true
    }
}
function bindEditInfo() {
    get{ModelTypeName}Detail(currentId.value).then(res => {
    editFrom.value = res.ResData
    //需个性化处理内容

    })
}
/**
    * 新增/修改保存
    */
function saveEditForm() {
    proxy.$refs['editFromRef'].validate((valid) => {
    if (valid) {
        var url = '{ModelTypeName}/Insert'
        if (currentId.value !== '') {
        url = '{ModelTypeName}/Update'
        }
        save{ModelTypeName}(editFrom.value,url).then(res => {
        if (res.Success) {
            proxy.$modal.msgSuccess('恭喜你，操作成功')
            dialogEditFormVisible.value = false
            loadTableData()
            InitDictItem()
        } else {
            proxy.$modal.msgError(res.ErrMsg)
        }
        })
    } else {
        return false
    }
    })
}
function setEnable(val) {
  if (ids.value.length === 0) {
    proxy.$modal.alert('请先选择要操作的数据')
    return false
  } else {
    const data = {
      Ids: ids.value,
      Flag: val
    }
    set{ModelTypeName}Enable(data).then(res => {
      if (res.Success) {
        proxy.$modal.msgSuccess('恭喜你，操作成功')
        loadTableData()
      } else {
        proxy.$modal.msgError(res.ErrMsg)
        }
    })
    }
}
function deleteSoft(val) {
  if (ids.value.length === 0) {
    proxy.$modal.alert('请先选择要操作的数据')
    return false
    } else {
    proxy.$modal.confirm('是否确认删除所选的数据项?').then(function() {
      const data = {
        Ids: ids.value,
        Flag: val
      }
        return  deleteSoft{ModelTypeName}(data)
    }).then(res => {
       if (res.Success) {
          proxy.$modal.msgSuccess('恭喜你，操作成功')
          loadTableData()
        } else {
          proxy.$modal.msgError(res.ErrMsg)
      }
    })
    }
}
function deletePhysics() {
  if (ids.value.length === 0) {
    proxy.$modal.alert('请先选择要操作的数据')
    return false
    } else {
    proxy.$modal.confirm('是否确认删除所选的数据项?').then(function() {
      const data = {
        Ids: ids.value
      }
        return  delete{ModelTypeName}(data)
    }).then(res => {
       if (res.Success) {
          proxy.$modal.msgSuccess('恭喜你，操作成功')
          loadTableData()
        } else {
          proxy.$modal.msgError(res.ErrMsg)
      }
    })
    }
}
/**
 * 当表格的排序条件发生变化的时候会触发该事件
 */
function handleSortChange(column) {
  if(column.prop!=null){
    queryParams.value.Sort = column.prop
  }
  if (column.order === 'ascending') {
    queryParams.value.Order = 'asc'
  } else {
    queryParams.value.Order = 'desc'
  }
  loadTableData()
}
/**
 * 当用户手动勾选checkbox数据行事件
 */
function handleSelectChange(selection) {
  ids.value = selection.map(item => item.Id);
  single.value = selection.length != 1;
  multiple.value = !selection.length;
}
loadTableData()
</script>

<style>
</style>
